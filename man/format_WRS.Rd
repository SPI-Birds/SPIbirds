% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_WRS.R
\name{format_WRS}
\alias{format_WRS}
\title{Construct standard format for data from Warsaw, Poland}
\usage{
format_WRS(
  db = choose_directory(),
  path = ".",
  species = NULL,
  pop = NULL,
  output_type = "R"
)
}
\arguments{
\item{db}{Location of database file.}

\item{path}{Location where output csv files will be saved.}

\item{species}{Species of interest. The 6 letter codes of all the species of
interest as listed in the
\href{https://github.com/SPI-Birds/documentation/blob/master/standard_protocol/SPI_Birds_Protocol_v1.0.0.pdf}{standard
protocol}. If blank will return all major species.}

\item{pop}{The three-letter code of population as listed in the \href{https://github.com/SPI-Birds/documentation/blob/master/standard_protocol/SPI_Birds_Protocol_v1.0.0.pdf}{standard
protocol}. For data owners with multiple populations (e.g. NIOO, UAN) where a single
pipeline is used for many populations this argument is used to extract data from
individual populations. For other pipelines that contain only one population
this argument can be ignored.}

\item{output_type}{Should the pipeline generate .csv files ('csv') or R objects ('R').}
}
\value{
Generates either 4 .csv files or 4 data frames in the standard format.
}
\description{
A pipeline to produce the standard format for the nest box population in Warsaw, Poland, administered by Marta Szulkin.
}
\details{
This section provides details on data management choices that are unique to
this data. For a general description of the standard format please see
\href{https://github.com/SPI-Birds/documentation/blob/master/standard_protocol/SPI_Birds_Protocol_v1.1.0.pdf}{here}.

\strong{Species}: Only PARMAJ and CYACAE are entered in the Capture and Individual tables.

\strong{IndvID}: IndvID codes of the form '19XX' (two numbers + XX) indicate a chick that died before fledging.
The first two numbers give the year in which the chick died. There is one adult band that also includes 'XX' so this should not
be used to filter out these records. The regular expression "^[:digit:]{2}XX" along with stringr::str_detect can be used to identify
and filter out these records.
}
